sp {drone*propose*initialize
    (state <s> ^superstate nil -^name <n*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name initialize-drone)
}

sp {drone*apply*initialize
    (state <s> ^operator <o*1>)
    (<o*1> ^name initialize-drone)
    -->
    (<s> ^name droneFlight ^wait-flag 1)
}

# No operators to choose from, perform no-op
sp {proposeWait
    (state <s> ^name droneFlight ^wait-flag <w>)
    -->
    (<s> ^operator <o> + <)
    (<o> ^name Processing)
}

sp {applyWait
    (state <s> ^name droneFlight ^operator <o> ^wait-flag <w>)
    (<o> ^name Processing)
    -->
    (<s> ^wait-flag (- <w>))
    (<s> ^wait-flag <w> -)
}

sp {drone*apply*operator*C2-Lost-Link
    "Return to base via shortest path after 1 minute following loss of link to avoid flight over populous areas"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <fd> -^addressedProblem ^acknowledgedCommands setAIOn)
    (<fd> ^takeOver true ^populated fully)
    -->
    (<s> ^addressedProblem C2 ^maxTimers 1 ^currentTimers 0 ^startNewTimer true)
    (write (crlf) |FOUND C2!|)
}

sp {drone*apply*operator*C3-Lost-Link
    "Return to base via shortest path after 8 minutes following lost of link to avoid flight over populous areas"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <fd> -^addressedProblem ^acknowledgedCommands setAIOn)
    (<fd> ^takeOver true ^populated lightly)
    -->
    (<s> ^addressedProblem C3 ^maxTimers 8 ^currentTimers 0 ^startNewTimer true)
    (write (crlf) |FOUND C3!|)
}

sp {drone*apply*operator*C4-Lost-Link
    "Maintain Pre-Programmed Course, Return to mission altitude/altitude floor after 1 minute"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <fd> -^addressedProblem ^acknowledgedCommands setAIOn)
    (<fd> ^takeOver true ^populated null ^currentTime <current-Time>)
    -->
    (<s> ^addressedProblem C4 ^c4Timer <t>)
    (<t> ^targetTime (+ <current-Time> 60))
    (write (crlf) |FOUND C4!|)
    (write (crlf) |Starting C4 Timer!|)
}

sp {drone*apply*removeC4DoneTimer
    "Removes C4's one minute timer and sends command to return to altitude floor"
    :o-support
    (state <s> ^name droneFlight ^c4Timer <t> ^io.input-link.flightdata <fd>)
    (<t> ^targetTime <t1>)
    (<fd> ^currentTime {<time> >= <t1>})
    -->
    (<s> ^c4Timer <t> -)
    (<s> ^sentCommand returnToAltitudeFloor)
    (write (crlf) |C4 Timer done. Sending command to return to altitude floor|)
}

sp {drone*apply*returnToBase*populated
   "Execute turn and retrace way points to home since we will be in a populated area in a minute"
   :o-support
   (state <s> ^name droneFlight ^io.input-link.flightdata <fd> ^willBeInPopulatedArea fully ^maxTimers <mt> ^currentTimers <cT>)
   (<fd> ^takeOver true)
   -->
   (<s> ^sentCommand reverse)
   (<s> ^willBeInPopulatedArea fully -)
   (<s> ^maxTimers <mT> -)
   (<s> ^currentTimers <cT> -)
   (write (crlf) |Return To Base because projected to be in populated!|)
}

sp {drone*apply*returnToBase*outOfTime
   "Execute turn and retrace way points to home since we are out of time"
    :o-support
    (state <s> ^name droneFlight ^startNewTimer true ^maxTimers <mT> ^currentTimers {<cT> >= <mT>})
    -->
    (<s> ^sentCommand reverse ^startNewTimer true - ^maxTimers <mT> - ^currentTimers <cT> -)
    (write (crlf) |Return to Base because we are out of time!|)
}

sp {drone*apply*startTimer
   "Start a new one minute timer"
   :o-support
   (state <s> ^name droneFlight ^io.input-link.flightdata <fd> ^willBeInPopulatedArea {<< lightly null >> <wPA> })
   (<fd> ^takeOver true ^currentTime <current-Time>)
   -->
   (<s> ^timer <t>)
   (<s> ^willBeInPopulatedArea <wPA> -)
   (<t> ^targetTime (+ <current-Time> 60))
   (write (crlf) |Starting one minute timer!|)
}

sp {drone*apply*timer-done-execute
    "Removes timers as done if the current time meets or exceeds their target time"
    :o-support
    (state <s> ^name droneFlight ^timer <t> ^io.input-link.flightdata <fd>)
    (<t> ^targetTime <target-time>)
    (<fd> ^currentTime {<time> >= <target-time>})
    -->
    (<s> ^timer <t> - ^startNewTimer true)
    (write (crlf) |Timer finished!|)
}

sp {drone*apply*commandToStartTimer
    "Adds command to start a new timer"
    :o-support
    (state <s> ^name droneFlight ^startNewTimer true ^maxTimers <mT> ^currentTimers {<cT> < <mT>})
    -->
    (<s> ^sentCommand queryPop ^startNewTimer true - ^currentTimers (+ 1 <cT>) ^currentTimers <cT> -)
    (write (crlf) |Querying population!|)
}

sp {drone*apply*takeOver
    "Issues first command when takeover is active"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <fd> -^commands)
    (<fd> ^takeOver true)
    -->
    (<s> ^sentCommand aiOn)
    (write (crlf) |Sending AiON Command!|)
}

sp {drone*apply*updateOut*setAIOn
    "Creates command on output for sending to XPlane to turn on the AI"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand aiOn)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref sim/cockpit/autopilot/autopilot_state
           ^setValue 16386
           ^name setAIOn)
    (<s> ^sentCommand aiOn -
         ^commands aiIsOn)
    (write (crlf) |Adding AI_ON!|)
}

sp {drone*apply*updateOut*reverseWaypoints
    "Creates command on output for sending to XPlane to overwrite the way points to return to home"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand reverse)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref null
           ^setValue reverse
           ^name reverseWaypoints)
    (<s> ^sentCommand reverse -)
    (write (crlf) |Adding Reverse Command!|)
}

sp {drone*apply*updateOut*queryForTimer
    "Creates command on output to check if the plane will be over a populated area in the next minute"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand queryPop)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref null
           ^setValue calculateWillBeInPopulatedArea
           ^name timerChecker)
    (<s> ^sentCommand queryPop -)
    (write (crlf) | Adding Check Timer Command!|)
}

sp {drone*apply*updateOut*goToAltitudeFloor
    "Creates command on output to tell X Plane to descend or rise to the given altitude"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand returnToAltitudeFloor)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref null
           ^setValue 500
           ^name returnToAltitudeFloor)
    (<s> ^sentCommand returnToAltitudeFloor -)
    (write (crlf) | Adding Return to Altitude Floor Command!|)
}

sp {drone*removeOutputCommand
    "Removes output command"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd>)
    (<fd> ^removeCommand <rc>)
    (<out> ^command <rc>)
    (<rc> ^name {<> timerChecker <n>})
    -->
    (<out> ^command <rc> -)
    (<s> ^acknowledgedCommands <n>)
    (write (crlf) |Removing Output Command!  | <n> )
}

sp {drone*markInPopulatedArea
    "Removes timer start command and creates local willBeInPopulatedArea wme"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd>)
    (<fd> ^removeCommand <rc>
          ^willBeInPopulatedArea <wPA>)
    (<out> ^command <rc>)
    (<rc> ^name timerChecker)
    -->
    (<out> ^command <rc> -)
    (<s> ^willBeInPopulatedArea <wPA>)
    (write (crlf) |Removing timerChecker command!|)
    (write (crlf) |Calculated WillBeInPopulatedArea as : | <wPA>)
}



----------------------------------------------------
IN PROGRESS
----------------------------------------------------
sp {drone*propose*initialize
    (state <s> ^superstate nil -^name <n*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name initialize-drone)
}

sp {drone*apply*initialize
    (state <s> ^operator <o*1>)
    (<o*1> ^name initialize-drone)
    -->
    (<s> ^name droneFlight ^wait-flag 1)
}

# No operators to choose from, perform no-op
sp {proposeWait
    (state <s> ^name droneFlight ^wait-flag <w>)
    -->
    (<s> ^operator <o> + <)
    (<o> ^name Processing)
}

sp {applyWait
    (state <s> ^name droneFlight ^operator <o> ^wait-flag <w>)
    (<o> ^name Processing)
    -->
    (<s> ^wait-flag (- <w>))
    (<s> ^wait-flag <w> -)
}

sp {drone*apply*operator*LightlyPopulated*FindContingency
    "Search for a previous decision otherwise default to C2 in lightly populated area"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <fd> -^addressedProblem ^acknowledgedCommands setAIOn)
    (<fd> ^takeOver true ^populated lightly)
    -->
    (<s> ^addressedProblem searchForPreviousDecision ^sentCommand searchPreviousDecisions)
    (write (crlf) | FOUND SEARCH!|)
}

sp {drone*apply*operator*C2-Lost-Link
    "Return to base via shortest path after 1 minute following loss of link to avoid flight over populous areas"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <fd> ^addressedProblem searchForPreviousDecision ^acknowledgedCommands searchDecisions ^decision C2)
    (<fd> ^takeOver true)
    -->
    (<s> ^addressedProblem searchForPreviousDecision -)
    (<s> ^addressedProblem C2 ^maxTimers 1 ^currentTimers 0 ^startNewTimer true)
    (write (crlf) |FOUND C2!|)
}

sp {drone*apply*operator*C3-Lost-Link
    "Return to base via shortest path after 8 minutes following lost of link to avoid flight over populous areas"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <fd> ^addressedProblem searchForPreviousDecision ^acknowledgedCommands searchDecisions ^decision C3)
    (<fd> ^takeOver true)
    -->
    (<s> ^addressedProblem searchForPreviousDecision -)
    (<s> ^addressedProblem C3 ^maxTimers 8 ^currentTimers 0 ^startNewTimer true)
    (write (crlf) |FOUND C3!|)
}

sp {drone*apply*operator*C4-Lost-Link
    "Maintain Pre-Programmed Course, Return to mission altitude/altitude floor after 1 minute"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <fd> -^addressedProblem ^acknowledgedCommands setAIOn)
    (<fd> ^takeOver true ^populated null ^currentTime <current-Time>)
    -->
    (<s> ^addressedProblem C4 ^c4Timer <t>)
    (<t> ^targetTime (+ <current-Time> 60))
    (write (crlf) |FOUND C4!|)
    (write (crlf) |Starting C4 Timer!|)
}

sp {drone*apply*removeC4DoneTimer
    "Removes C4's one minute timer and sends command to return to altitude floor"
    :o-support
    (state <s> ^name droneFlight ^c4Timer <t> ^io.input-link.flightdata <fd>)
    (<t> ^targetTime <t1>)
    (<fd> ^currentTime {<time> >= <t1>})
    -->
    (<s> ^c4Timer <t> -)
    (<s> ^sentCommand returnToAltitudeFloor)
    (write (crlf) |C4 Timer done. Sending command to return to altitude floor|)
}

sp {drone*apply*returnToBase*populated
   "Execute turn and retrace way points to home since we will be in a populated area in a minute"
   :o-support
   (state <s> ^name droneFlight ^io.input-link.flightdata <fd> ^willBeInPopulatedArea fully ^maxTimers <mt> ^currentTimers <cT>)
   (<fd> ^takeOver true)
   -->
   (<s> ^sentCommand reverse)
   (<s> ^willBeInPopulatedArea fully -)
   (<s> ^maxTimers <mT> -)
   (<s> ^currentTimers <cT> -)
   (write (crlf) |Return To Base because projected to be in populated!|)
}

sp {drone*apply*returnToBase*outOfTime
   "Execute turn and retrace way points to home since we are out of time"
    :o-support
    (state <s> ^name droneFlight ^startNewTimer true ^maxTimers <mT> ^currentTimers {<cT> >= <mT>})
    -->
    (<s> ^sentCommand reverse ^startNewTimer true - ^maxTimers <mT> - ^currentTimers <cT> -)
    (write (crlf) |Return to Base because we are out of time!|)
}

sp {drone*apply*startTimer
   "Start a new one minute timer"
   :o-support
   (state <s> ^name droneFlight ^io.input-link.flightdata <fd> ^willBeInPopulatedArea {<< lightly null >> <wPA> })
   (<fd> ^takeOver true ^currentTime <current-Time>)
   -->
   (<s> ^timer <t>)
   (<s> ^willBeInPopulatedArea <wPA> -)
   (<t> ^targetTime (+ <current-Time> 60))
   (write (crlf) |Starting one minute timer!|)
}

sp {drone*apply*timer-done-execute
    "Removes timers as done if the current time meets or exceeds their target time"
    :o-support
    (state <s> ^name droneFlight ^timer <t> ^io.input-link.flightdata <fd>)
    (<t> ^targetTime <target-time>)
    (<fd> ^currentTime {<time> >= <target-time>})
    -->
    (<s> ^timer <t> - ^startNewTimer true)
    (write (crlf) |Timer finished!|)
}

sp {drone*apply*commandToStartTimer
    "Adds command to start a new timer"
    :o-support
    (state <s> ^name droneFlight ^startNewTimer true ^maxTimers <mT> ^currentTimers {<cT> < <mT>})
    -->
    (<s> ^sentCommand queryPop ^startNewTimer true - ^currentTimers (+ 1 <cT>) ^currentTimers <cT> -)
    (write (crlf) |Querying population!|)
}

sp {drone*apply*takeOver
    "Issues first command when takeover is active"
    :o-support
    (state <s> ^name droneFlight ^io.input-link.flightdata <fd> -^commands)
    (<fd> ^takeOver true)
    -->
    (<s> ^sentCommand aiOn)
    (write (crlf) |Sending AiON Command!|)
}

sp {drone*apply*updateOut*setAIOn
    "Creates command on output for sending to XPlane to turn on the AI"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand aiOn)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref sim/cockpit/autopilot/autopilot_state
           ^setValue 16386
           ^name setAIOn)
    (<s> ^sentCommand aiOn -
         ^commands aiIsOn)
    (write (crlf) |Adding AI_ON!|)
}

sp {drone*apply*updateOut*reverseWaypoints
    "Creates command on output for sending to XPlane to overwrite the way points to return to home"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand reverse)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref null
           ^setValue reverse
           ^name reverseWaypoints)
    (<s> ^sentCommand reverse -)
    (write (crlf) |Adding Reverse Command!|)
}

sp {drone*apply*updateOut*queryForTimer
    "Creates command on output to check if the plane will be over a populated area in the next minute"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand queryPop)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref null
           ^setValue calculateWillBeInPopulatedArea
           ^name timerChecker)
    (<s> ^sentCommand queryPop -)
    (write (crlf) | Adding Check Timer Command!|)
}

sp {drone*apply*updateOut*goToAltitudeFloor
    "Creates command on output to tell X Plane to descend or rise to the given altitude"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand returnToAltitudeFloor)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref null
           ^setValue 500
           ^name returnToAltitudeFloor)
    (<s> ^sentCommand returnToAltitudeFloor -)
    (write (crlf) | Adding Return to Altitude Floor Command!|)
}

sp {drone*apply*updateOut*searchForPreviousDecision
    "Creates command on output to tell Java to search and return a close previous decision"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd> ^sentCommand searchPreviousDecisions)
    (<fd> ^takeOver true)
    -->
    (<out> ^command <com>)
    (<com> ^dref null
           ^setValue null
           ^name searchDecisions)
    (<s> ^sentCommand searchPreviousDecisions -)
    (write (crlf) | Adding Search Previous Decisions Command!|)
}

sp {drone*removeOutputCommand
    "Removes output command"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd>)
    (<fd> ^removeCommand <rc>)
    (<out> ^command <rc>)
    (<rc> ^name {<> timerChecker <> searchDecisions <n>})
    -->
    (<out> ^command <rc> -)
    (<s> ^acknowledgedCommands <n>)
    (write (crlf) |Removing Output Command!  | <n> )
}

sp {drone*markInPopulatedArea
    "Removes timer start command and creates local willBeInPopulatedArea wme"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd>)
    (<fd> ^removeCommand <rc>
          ^willBeInPopulatedArea <wPA>)
    (<out> ^command <rc>)
    (<rc> ^name timerChecker)
    -->
    (<out> ^command <rc> -)
    (<s> ^willBeInPopulatedArea <wPA>)
    (<s> ^acknowledgedCommands timerChecker)
    (write (crlf) |Removing timerChecker command!|)
    (write (crlf) |Calculated WillBeInPopulatedArea as : | <wPA>)
}

sp {drone*markPreviousDecision
    "Removes timer start command and creates local decision choice wme.  The return decision will either be the closest decision or C2 as the default"
    :o-support
    (state <s> ^name droneFlight ^io.output-link <out> ^io.input-link.flightdata <fd>)
    (<fd> ^removeCommand <rc>
          ^decision <d>)
    (<out> ^command <rc>)
    (<rc> ^name searchDecisions)
    -->
    (<out> ^command <rc> -)
    (<s> ^decision <d>)
    (<s> ^acknowledgedCommands searchDecisions)
    (write (crlf) |Received the closest decision or default C2!|)
    (write (crlf) |Decision : | <d>)
}

Created Chunks
sp {chunk-1*d15*tie*1
    :chunk
    (state <s1> ^operator <o1> +)
    (<o1> ^timerLength 8)
    (<s1> ^operator { <> <o1> <o2>} +)
    (<o2> ^timerLength 1)
    -->
    (<s1> ^operator <o2> > <o1>)
    (write (crlf) |Used chunk!|)
}